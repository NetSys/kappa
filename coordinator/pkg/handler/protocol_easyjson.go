// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handler

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler(in *jlexer.Lexer, out *event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = PidT(in.Int())
		case "seqno":
			out.Seqno = SeqnoT(in.Int())
		case "chk_id":
			out.ChkID = string(in.String())
		case "coord_call_result":
			if m, ok := out.CoordCallResult.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.CoordCallResult.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.CoordCallResult = in.Interface()
			}
		case "app_event":
			if m, ok := out.AppEvent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AppEvent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AppEvent = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler(out *jwriter.Writer, in event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pid))
	}
	{
		const prefix string = ",\"seqno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Seqno))
	}
	{
		const prefix string = ",\"chk_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChkID))
	}
	{
		const prefix string = ",\"coord_call_result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.CoordCallResult.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.CoordCallResult.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.CoordCallResult))
		}
	}
	{
		const prefix string = ",\"app_event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.AppEvent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AppEvent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AppEvent))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler(l, v)
}
func easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler1(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = PidT(in.Int())
		case "seqno":
			out.Seqno = SeqnoT(in.Int())
		case "chk_id":
			out.ChkID = string(in.String())
		case "calls":
			if in.IsNull() {
				in.Skip()
				out.Calls = nil
			} else {
				in.Delim('[')
				if out.Calls == nil {
					if !in.IsDelim(']') {
						out.Calls = make([]CoordCall, 0, 1)
					} else {
						out.Calls = []CoordCall{}
					}
				} else {
					out.Calls = (out.Calls)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CoordCall
					(v1).UnmarshalEasyJSON(in)
					out.Calls = append(out.Calls, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blocked":
			out.Blocked = bool(in.Bool())
		case "err":
			if in.IsNull() {
				in.Skip()
				out.Err = nil
			} else {
				if out.Err == nil {
					out.Err = new(string)
				}
				*out.Err = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler1(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pid))
	}
	{
		const prefix string = ",\"seqno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Seqno))
	}
	{
		const prefix string = ",\"chk_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChkID))
	}
	{
		const prefix string = ",\"calls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Calls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Calls {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blocked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Blocked))
	}
	{
		const prefix string = ",\"err\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Err == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Err))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler1(l, v)
}
func easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler2(in *jlexer.Lexer, out *CoordCall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seqno":
			out.Seqno = SeqnoT(in.Int())
		case "op":
			out.Op = string(in.String())
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler2(out *jwriter.Writer, in CoordCall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"seqno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Seqno))
	}
	{
		const prefix string = ",\"op\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Params).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoordCall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoordCall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE4425964EncodeGithubComNetSysKappaCoordinatorPkgHandler2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoordCall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoordCall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE4425964DecodeGithubComNetSysKappaCoordinatorPkgHandler2(l, v)
}
