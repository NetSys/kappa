// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package executor

import (
	json "encoding/json"
	handler "github.com/NetSys/kappa/coordinator/pkg/handler"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor(in *jlexer.Lexer, out *handleCCRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor(out *jwriter.Writer, in handleCCRes) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v handleCCRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v handleCCRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *handleCCRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *handleCCRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor1(in *jlexer.Lexer, out *ccWait) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = handler.PidT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor1(out *jwriter.Writer, in ccWait) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccWait) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccWait) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccWait) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccWait) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor1(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor2(in *jlexer.Lexer, out *ccSpawn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "child_chk_id":
			out.ChildChkID = string(in.String())
		case "future_pids":
			if in.IsNull() {
				in.Skip()
				out.FuturePids = nil
			} else {
				in.Delim('[')
				if out.FuturePids == nil {
					if !in.IsDelim(']') {
						out.FuturePids = make([]handler.PidT, 0, 8)
					} else {
						out.FuturePids = []handler.PidT{}
					}
				} else {
					out.FuturePids = (out.FuturePids)[:0]
				}
				for !in.IsDelim(']') {
					var v1 handler.PidT
					v1 = handler.PidT(in.Int())
					out.FuturePids = append(out.FuturePids, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "await_pids":
			if in.IsNull() {
				in.Skip()
				out.AwaitPids = nil
			} else {
				in.Delim('[')
				if out.AwaitPids == nil {
					if !in.IsDelim(']') {
						out.AwaitPids = make([]handler.PidT, 0, 8)
					} else {
						out.AwaitPids = []handler.PidT{}
					}
				} else {
					out.AwaitPids = (out.AwaitPids)[:0]
				}
				for !in.IsDelim(']') {
					var v2 handler.PidT
					v2 = handler.PidT(in.Int())
					out.AwaitPids = append(out.AwaitPids, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blocking":
			out.Blocking = bool(in.Bool())
		case "copies":
			out.Copies = int(in.Int())
		case "on_coordinator":
			out.OnCoordinator = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor2(out *jwriter.Writer, in ccSpawn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"child_chk_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChildChkID))
	}
	{
		const prefix string = ",\"future_pids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FuturePids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.FuturePids {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"await_pids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AwaitPids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.AwaitPids {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"blocking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Blocking))
	}
	{
		const prefix string = ",\"copies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Copies))
	}
	{
		const prefix string = ",\"on_coordinator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OnCoordinator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccSpawn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccSpawn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccSpawn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccSpawn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor2(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor3(in *jlexer.Lexer, out *ccRemapStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tmp_bucket":
			out.TmpBucket = string(in.String())
		case "tmp_key":
			out.TmpKey = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor3(out *jwriter.Writer, in ccRemapStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tmp_bucket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TmpBucket))
	}
	{
		const prefix string = ",\"tmp_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TmpKey))
	}
	{
		const prefix string = ",\"bucket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccRemapStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccRemapStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccRemapStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccRemapStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor3(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor4(in *jlexer.Lexer, out *ccMapSpawn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "child_chk_id":
			out.ChildChkID = string(in.String())
		case "future_pids":
			if in.IsNull() {
				in.Skip()
				out.FuturePids = nil
			} else {
				in.Delim('[')
				if out.FuturePids == nil {
					if !in.IsDelim(']') {
						out.FuturePids = make([]handler.PidT, 0, 8)
					} else {
						out.FuturePids = []handler.PidT{}
					}
				} else {
					out.FuturePids = (out.FuturePids)[:0]
				}
				for !in.IsDelim(']') {
					var v7 handler.PidT
					v7 = handler.PidT(in.Int())
					out.FuturePids = append(out.FuturePids, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "elems":
			if in.IsNull() {
				in.Skip()
				out.Elems = nil
			} else {
				in.Delim('[')
				if out.Elems == nil {
					if !in.IsDelim(']') {
						out.Elems = make([]string, 0, 4)
					} else {
						out.Elems = []string{}
					}
				} else {
					out.Elems = (out.Elems)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Elems = append(out.Elems, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "await_pids":
			if in.IsNull() {
				in.Skip()
				out.AwaitPids = nil
			} else {
				in.Delim('[')
				if out.AwaitPids == nil {
					if !in.IsDelim(']') {
						out.AwaitPids = make([]handler.PidT, 0, 8)
					} else {
						out.AwaitPids = []handler.PidT{}
					}
				} else {
					out.AwaitPids = (out.AwaitPids)[:0]
				}
				for !in.IsDelim(']') {
					var v9 handler.PidT
					v9 = handler.PidT(in.Int())
					out.AwaitPids = append(out.AwaitPids, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "on_coordinator":
			out.OnCoordinator = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor4(out *jwriter.Writer, in ccMapSpawn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"child_chk_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChildChkID))
	}
	{
		const prefix string = ",\"future_pids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.FuturePids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.FuturePids {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"elems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Elems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Elems {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"await_pids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AwaitPids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.AwaitPids {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"on_coordinator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.OnCoordinator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccMapSpawn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccMapSpawn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccMapSpawn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccMapSpawn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor4(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor5(in *jlexer.Lexer, out *ccExit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = ProcessResT(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor5(out *jwriter.Writer, in ccExit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccExit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccExit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccExit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccExit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor5(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor6(in *jlexer.Lexer, out *ccEnqueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "qid":
			out.Qid = QidT(in.Int())
		case "objs":
			if in.IsNull() {
				in.Skip()
				out.Objs = nil
			} else {
				in.Delim('[')
				if out.Objs == nil {
					if !in.IsDelim(']') {
						out.Objs = make([]string, 0, 4)
					} else {
						out.Objs = []string{}
					}
				} else {
					out.Objs = (out.Objs)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Objs = append(out.Objs, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor6(out *jwriter.Writer, in ccEnqueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"qid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Qid))
	}
	{
		const prefix string = ",\"objs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Objs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Objs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccEnqueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccEnqueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccEnqueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccEnqueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor6(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor7(in *jlexer.Lexer, out *ccDequeue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "qid":
			out.Qid = QidT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor7(out *jwriter.Writer, in ccDequeue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"qid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Qid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccDequeue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccDequeue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccDequeue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccDequeue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor7(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor8(in *jlexer.Lexer, out *ccCreateQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_size":
			out.MaxSize = int(in.Int())
		case "copies":
			out.Copies = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor8(out *jwriter.Writer, in ccCreateQueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"max_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxSize))
	}
	{
		const prefix string = ",\"copies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Copies))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccCreateQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccCreateQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccCreateQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccCreateQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor8(l, v)
}
func easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor9(in *jlexer.Lexer, out *ccCheckpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor9(out *jwriter.Writer, in ccCheckpoint) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ccCheckpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ccCheckpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4e5bd355EncodeGithubComNetSysKappaCoordinatorPkgExecutor9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ccCheckpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ccCheckpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4e5bd355DecodeGithubComNetSysKappaCoordinatorPkgExecutor9(l, v)
}
